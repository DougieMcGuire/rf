(function () {
    let isRunning = false;
    let snapCount = 0;
    let snapsPerSecond = 0;

    const elementsToHide = [
        '/html/body/main/div[1]/div[2]',
        '/html/body/main/div[1]/div[3]/div/div/div/img',
        '/html/body/main/div[1]/div[3]/div/div/div/div[1]'
    ];

    function hideElements() {
        elementsToHide.forEach(xpath => {
            const element = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            if (element) element.style.display = 'none';
        });
    }

    function widenElement() {
        const elementXpath = '/html/body/main/div[1]/div[3]/div/div/div';
        const element = document.evaluate(elementXpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        if (element) {
            element.style.width = '80vw';
        }
    }

    const loginUI = `
        <div id="login-screen" style="position:fixed; top:0; left:0; width:100vw; height:100vh; background-color:#1d1d1d; display:flex; flex-direction:column; align-items:center; justify-content:center; color:white; font-family: 'Arial', sans-serif; z-index:10000;">
            <h1 style="font-size:2.5rem; margin-bottom:20px; font-weight:900;">Dougie's SnapBot</h1>
            <div style="width:300px; margin-bottom:15px;">
                <label for="username" style="display:block; margin-bottom:5px; font-weight:bold;">Username:</label>
                <input id="username" type="text" style="width:100%; padding:10px; border:none; border-radius:5px; background-color:#333; color:white; font-size:16px;">
            </div>
            <div style="width:300px; margin-bottom:20px;">
                <label for="password" style="display:block; margin-bottom:5px; font-weight:bold;">Password:</label>
                <input id="password" type="password" style="width:100%; padding:10px; border:none; border-radius:5px; background-color:#333; color:white; font-size:16px;">
            </div>
            <button id="loginButton" style="padding:10px 20px; border:none; border-radius:5px; background-color:#9c27b0; color:white; font-size:16px; font-weight:bold; cursor:pointer; transition:background-color 0.3s;">Login</button>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', loginUI);

    document.getElementById('loginButton').addEventListener('click', () => {
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        if (password === 'dougie') {
            fadeOutLoginScreen(username);
        } else {
            alert('Incorrect password');
        }
    });

    function fadeOutLoginScreen(username) {
        const loginScreen = document.getElementById('login-screen');
        loginScreen.style.opacity = 0;
        setTimeout(() => {
            loginScreen.remove();
            hideElements();
            widenElement();
            showGreeting(username);
        }, 700);
    }

    function showGreeting(username) {
        const hours = new Date().getHours();
        let greeting = hours < 12 ? 'Morning' : hours < 18 ? 'Afternoon' : 'Evening';

        const greetingUI = `
            <div id="greeting-screen" style="position:fixed; top:0; left:0; width:100vw; height:100vh; background-color:#1d1d1d; display:flex; align-items:center; justify-content:center; z-index:9999;">
                <h2 id="greeting-text" style="font-size:2rem; color:white; opacity:0; transform: translateY(-20px); font-weight:700;">Good ${greeting}, ${username}</h2>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', greetingUI);

        const greetingText = document.getElementById('greeting-text');
        setTimeout(() => {
            greetingText.style.transition = 'opacity 0.7s ease, transform 0.7s ease';
            greetingText.style.opacity = 1;
            greetingText.style.transform = 'translateY(0)';
        }, 100);

        setTimeout(() => {
            greetingText.style.opacity = 0;
            greetingText.style.transform = 'translateY(-20px)';
            setTimeout(() => {
                document.getElementById('greeting-screen').remove();
                showMainUI(username);
            }, 700);
        }, 1500);
    }

    function showMainUI(username) {
        const uiHtml = `
            <div id="custom-ui" style="position:fixed; top:0; right:0; width:450px; height:100%; background-color:#2c2c2c; display:flex; flex-direction:column; align-items:center; justify-content:flex-start; padding:20px; box-sizing:border-box; color:white; font-family: 'Arial', sans-serif; box-shadow: -2px 0 10px rgba(0,0,0,0.5); z-index:9998;">
                <h2 style="margin-bottom:20px; color:#9c27b0; font-weight:900;">Dougie's Snapbot</h2>
                <div style="width:100%; margin-bottom:20px;">
                    <label for="recipientCount" style="display:block; margin-bottom:5px; font-weight:bold;">Number of Recipients:</label>
                    <input id="recipientCount" type="number" min="1" value="1" style="width:100%; padding:10px; border:none; border-radius:5px; background-color:#333; color:white; font-size:16px;">
                </div>
                <div style="width:100%; margin-bottom:20px;">
                    <label for="shortcutNumber" style="display:block; margin-bottom:5px; font-weight:bold;">Which Shortcut?</label>
                    <input id="shortcutNumber" type="number" min="1" value="4" style="width:100%; padding:10px; border:none; border-radius:5px; background-color:#333; color:white; font-size:16px;">
                    <p style="margin-top:5px; font-size:12px; color:#bbb;">(Includes New Groups, New Friends, Birthdays, ETC?)</p>
                </div>
                <div id="snapCounter" style="width:100%; background-color:#333; padding:15px; border-radius:5px; text-align:center; font-weight:bold; font-size:20px; margin-bottom:20px; box-shadow: 0 2px 5px rgba(0,0,0,0.2);">Snaps Sent: 0</div>
                <div id="snapsPerSecond" style="width:100%; background-color:#333; padding:15px; border-radius:5px; text-align:center; font-weight:bold; font-size:20px; margin-bottom:20px; box-shadow: 0 2px 5px rgba(0,0,0,0.2);">Snaps Per Second: 0</div>
                <div style="width:100%; text-align:center; margin-bottom:20px;">
                    <label class="switch" style="position:relative; display:inline-block; width:60px; height:34px;">
                        <input type="checkbox" id="toggleButton">
                        <span class="slider" style="position:absolute; cursor:pointer; top:0; left:0; right:0; bottom:0; background-color:#ccc; transition:.4s; border-radius:34px;"></span>
                    </label>
                    <span id="toggleStatus" style="display:block; margin-top:10px; font-weight:bold; font-size:18px;">Stopped</span>
                </div>
                <button id="creditsButton" style="width:100%; padding:10px; border:none; border-radius:5px; background-color:#9c27b0; color:white; font-size:16px; font-weight:bold; cursor:pointer; transition:background-color 0.3s;">Credits</button>
                <button id="nightModeToggle" style="width:100%; padding:10px; border:none; border-radius:5px; background-color:#333; color:white; font-size:16px; font-weight:bold; cursor:pointer; transition:background-color 0.3s; margin-top:20px;">Toggle Night Mode</button>
            </div>
            <div id="night-mode-screen" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background-color:black; color:white; display:flex; align-items:center; justify-content:center; font-family: 'Arial', sans-serif; z-index:9999;">
                <h2 id="nightSnapCounter" style="font-size:3rem;">Snaps Sent: ${snapCount}</h2>
                <button id="toggleOffNightMode" style="position:absolute; bottom:20px; right:20px; padding:10px 20px; border:none; border-radius:5px; background-color:#000; color:white; font-size:16px; cursor:pointer; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);">Toggle Off Night Mode</button>
            </div>
            <div id="snap-log" style="position:fixed; top:0; left:0; width:450px; height:100%; background-color:#2c2c2c; display:flex; flex-direction:column; align-items:center; justify-content:flex-start; padding:20px; box-sizing:border-box; color:white; font-family: 'Arial', sans-serif; box-shadow: 2px 0 10px rgba(0,0,0,0.5); z-index:9997; overflow-y:auto;">
                <h2 style="margin-bottom:20px; color:#9c27b0; font-weight:900;">Snap Log</h2>
                <div id="logContent" style="width:100%; background-color:#333; padding:15px; border-radius:5px; margin-bottom:20px; font-size:14px; max-height:80%; overflow-y:auto;"></div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', uiHtml);

        const style = document.createElement('style');
        style.textContent = `
            .switch input {opacity:0; width:0; height:0;}
            .slider:before {position:absolute; content:""; height:26px; width:26px; left:4px; bottom:4px; background-color:white; transition:.4s; border-radius:50%;}
            input:checked + .slider {background-color:#9c27b0;}
            input:checked + .slider:before {transform:translateX(26px);}

            #creditsButton:hover, #nightModeToggle:hover {background-color:#8e24aa;}
        `;
        document.head.appendChild(style);

        document.getElementById('creditsButton').addEventListener('click', () => {
            window.location.href = 'https://www.dougie.wtf';
        });

        document.getElementById('nightModeToggle').addEventListener('click', toggleNightMode);
        document.getElementById('toggleOffNightMode').addEventListener('click', toggleNightMode);
        document.getElementById('toggleButton').addEventListener('change', function() {
            isRunning = this.checked;
            document.getElementById('toggleStatus').innerText = isRunning ? 'Running' : 'Stopped';
            if (isRunning) runSequence();
        });

        // Ensure Night Mode is off by default
        document.getElementById('night-mode-screen').style.display = 'none';
    }

    function toggleNightMode() {
        const nightModeScreen = document.getElementById('night-mode-screen');
        nightModeScreen.style.display = nightModeScreen.style.display === 'none' ? 'flex' : 'none';
        document.getElementById('nightSnapCounter').innerText = `Snaps Sent: ${snapCount}`;
    }

    function logMessage(message) {
        const logContent = document.getElementById('logContent');
        const newLog = document.createElement('div');
        newLog.textContent = `${new Date().toLocaleTimeString()} - ${message}`;
        logContent.appendChild(newLog);
        logContent.scrollTop = logContent.scrollHeight;
    }

    function waitForElement(xpath, timeout = 3000) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            const interval = setInterval(() => {
                const element = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                if (element) {
                    clearInterval(interval);
                    resolve(element);
                } else if (Date.now() - startTime > timeout) {
                    clearInterval(interval);
                    reject(new Error('Element not found within timeout.'));
                }
            }, 20);
        });
    }

    async function clickElement(xpath) {
        try {
            const element = await waitForElement(xpath);
            element.click();
            logMessage(`Clicked: ${xpath.split('/').pop()}`);
            await new Promise(resolve => setTimeout(resolve, 50));
        } catch (error) {
            logMessage(`Error clicking ${xpath.split('/').pop()}: ${error.message}`);
        }
    }

    async function runSequence() {
        if (!isRunning) return;

        try {
            await clickElement('/html/body/main/div[1]/div[3]/div/div/div/div[2]/div[1]/div/div/div/div/div/div[2]/div/div/div[1]/button[1]');
            await clickElement('/html/body/main/div[1]/div[3]/div/div/div/div[2]/div[1]/div/div/div/div/div[2]/div[2]/button[2]');
            
            const shortcutNumber = document.getElementById('shortcutNumber').value;
            await clickElement(`/html/body/main/div[1]/div[3]/div/div/div/div[2]/div[1]/div/div/div/div/div[1]/div/form/div/div[2]/button[${shortcutNumber}]`);

            const recipientCount = parseInt(document.getElementById('recipientCount').value);
            for (let i = 2; i <= recipientCount + 1; i++) {
                await clickElement(`/html/body/main/div[1]/div[3]/div/div/div/div[2]/div[1]/div/div/div/div/div[1]/div/form/div/ul/li[${i}]/div/div[3]`);
            }

            await clickElement('/html/body/main/div[1]/div[3]/div/div/div/div[2]/div[1]/div/div/div/div/div[1]/div/form/div[2]/button');

            try {
                await waitForElement("//div[contains(@class, 'tPHQ9') and contains(@class, 'BqyU7')]/span[contains(text(), 'Snap sent!')]", 3000);
                logMessage('Snap sent notification detected.');
            } catch (error) {
                logMessage('Snap sent notification not detected within 3 seconds.');
            }

            snapCount += recipientCount;
            snapsPerSecond = (snapsPerSecond * 0.9) + (recipientCount * 0.1);
            document.getElementById('snapCounter').innerText = `Snaps Sent: ${snapCount}`;
            document.getElementById('snapsPerSecond').innerText = `Snaps Per Second: ${snapsPerSecond.toFixed(1)}`;
            document.getElementById('nightSnapCounter').innerText = `Snaps Sent: ${snapCount}`;
        } catch (error) {
            logMessage(`Error in sequence: ${error.message}`);
        }

        if (isRunning) {
            setTimeout(runSequence, 500);
        }
    }

    const originalFetch = window.fetch;
    window.fetch = function(input, init) {
        const blockedUrls = [
            'https://web.snapchat.com/web-analytics-v2/web/events',
            'https://cf-st.sc-cdn.net/'
        ];

        if (typeof input === 'string' && blockedUrls.some(url => input.includes(url))) {
            return Promise.resolve(new Response('{}', { status: 204, statusText: 'No Content' }));
        }
        return originalFetch(input, init);
    };

    hideElements();
    widenElement();

})();
